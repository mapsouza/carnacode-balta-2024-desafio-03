using System.Globalization;
using Imc.Model;

namespace Imc.Services;

public static class StaticInfo
{
    public enum Sexo
    {
        Masculino,
        Feminino
    }

    public static List<HistoryText> ListaTextoIMC()
    {
        return
        [
            new HistoryText()
            {
                Id=1,
                Title = "Baixo peso muito grave ‚ò†Ô∏è",
                Text = "Voc√™ precisa de um tratamento urgente! Procure um m√©dico ou psic√≥logo"
            },

            new HistoryText()
            {
                Id=2,
                Title = "Grave ‚õîÔ∏è",
                Text = "Anorexia e Bulimia s√£o doen√ßas graves!! Procure um especialista e cuide da sua sa√∫de!"
            },

            new HistoryText()
            {
                Id=3,
                Title = "Baixo peso ‚ö†Ô∏è",
                Text = "Voc√™ precisa comer mais feij√£o com arroz meu amigo!"
            },

            new HistoryText()
            {
                Id=4,
                Title = "Peso normal ‚úÖ",
                Text = "Parab√©ns, voc√™ est√° no seu peso ideal, continue mantendo este estilo!"
            },
            new HistoryText()
            {
                Id=5,
                Title = "Sobrepeso ‚ö†Ô∏è", 
                Text = "Estamos quase l√°! Fa√ßa alguns ajustes para ficar no peso ideal!"
            },
            new HistoryText()
            {
                Id=6,
                Title = "Obesidade grau I ‚õîÔ∏è", 
                Text = "O que voc√™ est√° fazendo a√≠? Vai j√° pra academia e para de comer!"
            },
            new HistoryText()
            {
                Id=7,
                Title = "Obesidade grau II üòà", 
                Text = "Mais um pouco vou te indicar meu m√©dico para cortar o seu estomago!"
            },
            new HistoryText()
            {
                Id=8,
                Title = "Obesidade grau III üíÄ‚ò¢Ô∏èü™¶", 
                Text = "Situa√ß√£o ficou cr√≠tica para voc√™! Procura um m√©dico e vai cuidar dessa pan√ßa !!"
            }

        ];
    }

    public static double? ToDouble(this string valor)
    {
        try
        {
            var x = double.Parse(valor);
            return x;
        }
        catch
        {
            return null;
        }
    }

    public static string? DateFormat(this DateTime date)
    {
        var ts = new TimeSpan(DateTime.Now.Ticks - date.Ticks);
        double delta = Math.Abs(ts.TotalSeconds);

        if (delta < 60)
        {
            return "< 1 min";
        }

        if (delta < 60 * 2)
        {
            return "1 min";
        }

        if (delta < 45 * 60)
        {
            return ts.Minutes + " min";
        }

        if (delta < 90 * 60)
        {
            return "1h";
        }

        if (delta < 24 * 60 * 60)
        {
            return ts.Hours + " hs";
        }

        if (delta < 48 * 60 * 60)
        {
            return "ontem";
        }

        if (date.Date >= DateTime.Now.Date.AddDays(-6))
        {
            var cultureDate = new System.Globalization.CultureInfo("pt-BR");
            return cultureDate.DateTimeFormat.GetAbbreviatedDayName(date.DayOfWeek);
        }

        if (date.Year.Equals(DateTime.Now.Year))
        {
            var cultureDate = new System.Globalization.CultureInfo("pt-BR");
            return string.Format(cultureDate, "{0:dd MMM}", date);
        }

        return string.Format("{0:dd/MM/yy}", date);
    }
}